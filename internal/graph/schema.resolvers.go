package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"

	"github.com/IlianBuh/GraphQL/internal/graph/model"
	"github.com/IlianBuh/GraphQL/internal/lib/validate"
)

// SignUp is the resolver for the signUp field.
func (r *mutationResolver) SignUp(ctx context.Context, login string, email string, password string) (*model.Token, error) {
	if err := validate.SignUp(login, email, password); err != nil {
		return nil, sendErr(InvalidInput, err)
	}

	token, err := r.sso.SignUp(ctx, login, email, password)
	if err != nil {
		// TODO : handle some error types

		return nil, sendErr(Internal, err)
	}

	return &model.Token{Token: token}, nil
}

// LogIn is the resolver for the logIn field.
func (r *queryResolver) LogIn(ctx context.Context, login string, password string) (*model.Token, error) {
	if err := validate.LogIn(login, password); err != nil {
		return nil, sendErr(InvalidInput, err)
	}

	token, err := r.sso.LogIn(ctx, login, password)
	if err != nil {
		// TODO : handle errors

		return nil, sendErr(Internal, err)
	}

	return &model.Token{Token: token}, nil
}

// FollowersList is the resolver for the followersList field.
func (r *queryResolver) FollowersList(ctx context.Context, userID int32) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: FollowersList - followersList"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
*/
