package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"errors"

	serrors "github.com/IlianBuh/GraphQL/internal/clients/sso/errors"
	"github.com/IlianBuh/GraphQL/internal/graph/model"
	"github.com/IlianBuh/GraphQL/internal/lib/mapper"
	"github.com/IlianBuh/GraphQL/internal/lib/validate"
)

// SignUp is the resolver for the signUp field.
func (r *mutationResolver) SignUp(ctx context.Context, login string, email string, password string) (*model.Token, error) {
	if err := validate.SignUp(login, email, password); err != nil {
		return nil, sendErr(InvalidArgument, err)
	}

	token, err := r.SSO.SignUp(ctx, login, email, password)
	if err != nil {
		var ssoerr *serrors.Error
		if errors.As(err, &ssoerr) {
			return nil, handleSsoError(ssoerr)
		}
		return nil, sendErr(Internal, err)
	}

	return &model.Token{Token: token}, nil
}

// Follow is the resolver for the follow field.
func (r *mutationResolver) Follow(ctx context.Context, srcID int32, targetID int32) (*string, error) {
	if err := validate.Id(srcID); err != nil {
		return nil, sendErr(InvalidArgument, err)
	}
	if err := validate.Id(targetID); err != nil {
		return nil, sendErr(InvalidArgument, err)
	}

	err := r.SSO.Follow(ctx, int(srcID), int(targetID))
	if err != nil {
		return nil, sendErr(Internal, err)
	}

	return nil, nil
}

// Unfollow is the resolver for the unfollow field.
func (r *mutationResolver) Unfollow(ctx context.Context, srcID int32, targetID int32) (*string, error) {
	if err := validate.Id(srcID); err != nil {
		return nil, sendErr(InvalidArgument, err)
	}
	if err := validate.Id(targetID); err != nil {
		return nil, sendErr(InvalidArgument, err)
	}

	err := r.SSO.Follow(ctx, int(srcID), int(targetID))
	if err != nil {
		return nil, sendErr(Internal, err)
	}

	return nil, nil
}

// LogIn is the resolver for the logIn field.
func (r *queryResolver) LogIn(ctx context.Context, login string, password string) (*model.Token, error) {
	if err := validate.LogIn(login, password); err != nil {
		return nil, sendErr(InvalidArgument, err)
	}

	token, err := r.SSO.LogIn(ctx, login, password)
	if err != nil {
		var ssoerr *serrors.Error
		if errors.As(err, &ssoerr) {
			return nil, handleSsoError(ssoerr)
		}

		return nil, sendErr(Internal, err)
	}

	return &model.Token{Token: token}, nil
}

// ListFollowers is the resolver for the listFollowers field.
func (r *queryResolver) ListFollowers(ctx context.Context, id int32) ([]*model.User, error) {
	if err := validate.Id(id); err != nil {
		return nil, sendErr(InvalidArgument, err)
	}

	users, err := r.SSO.FollowersList(ctx, id)
	if err != nil {
		var ssoerr *serrors.Error
		if errors.As(err, &ssoerr) {
			return nil, handleSsoError(ssoerr)
		}

		return nil, sendErr(Internal, err)
	}

	return mapper.MUsersToApi(users), nil
}

// ListFollowers is the resolver for the listFollowers field.
func (r *queryResolver) ListFollowees(ctx context.Context, id int32) ([]*model.User, error) {
	if err := validate.Id(id); err != nil {
		return nil, sendErr(InvalidArgument, err)
	}

	users, err := r.SSO.FolloweesList(ctx, id)
	if err != nil {
		var ssoerr *serrors.Error
		if errors.As(err, &ssoerr) {
			return nil, handleSsoError(ssoerr)
		}

		return nil, sendErr(Internal, err)
	}

	return mapper.MUsersToApi(users), nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int32) (*model.User, error) {
	if err := validate.Id(id); err != nil {
		return nil, sendErr(InvalidArgument, err)
	}

	user, err := r.SSO.User(ctx, int(id))
	if err != nil {
		var ssoerr *serrors.Error
		if errors.As(err, &ssoerr) {
			return nil, handleSsoError(ssoerr)
		}

		return nil, sendErr(Internal, err)
	}

	return mapper.UserToApi(user), err
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, id []int32) ([]*model.User, error) {
	if err := validate.Ids(id); err != nil {
		return nil, sendErr(InvalidArgument, err)
	}

	users, err := r.SSO.Users(ctx, mapper.NumsTToNumsE[int32, int](id))
	if err != nil {
		var ssoerr *serrors.Error
		if errors.As(err, &ssoerr) {
			return nil, handleSsoError(ssoerr)
		}

		return nil, sendErr(Internal, err)
	}

	return mapper.MUsersToApi(users), err
}

// UsersByLogin is the resolver for the usersByLogin field.
func (r *queryResolver) UsersByLogin(ctx context.Context, login string) ([]*model.User, error) {
	if err := validate.Login(login); err != nil {
		return nil, sendErr(InvalidArgument, err)
	}

	users, err := r.SSO.UsersByLogin(ctx, login)
	if err != nil {
		return nil, sendErr(Internal, err)
	}

	return mapper.MUsersToApi(users), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
